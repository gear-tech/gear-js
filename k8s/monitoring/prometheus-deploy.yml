---
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-conf
  namespace: monitoring
  labels:
    app: prometheus
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s

    rule_files:
      - 'rules.yml'

    alerting:
      alertmanagers:
        - static_configs:
          - targets:
            - alertmanager:9093

    scrape_configs:
      - job_name: 'prometheus'
        scrape_interval: 5s
        static_configs:
          - targets: [ 'prometheus:9090' ]
      - job_name: 'node_exporter'
        scrape_interval: 5s
        static_configs:
        - targets: [ '52.9.232.93:9100' ]
          labels:
            hostname: 'testnet-gear01'
        - targets: [ '50.18.102.12:9100' ]
          labels:
            hostname: 'testnet-gear02'
        - targets: [ '52.8.217.173:9100' ]
          labels:
            hostname: 'testnet-gear03'
        - targets: [ '54.153.5.48:9100' ]
          labels:
            hostname: 'testnet-gear04'
        - targets: [ '54.176.117.80:9100' ]
          labels:
            hostname: 'gear-tech.io'
      - job_name: 'substrate_exporter'
        scrape_interval: 5s
        static_configs:
        - targets: [ '52.9.232.93:9615' ]
          labels:
            hostname: 'testnet-gear01'
        - targets: [ '50.18.102.12:9615' ]
          labels:
            hostname: 'testnet-gear02'
        - targets: [ '52.8.217.173:9615' ]
          labels:
            hostname: 'testnet-gear03'
        - targets: [ '54.153.5.48:9615' ]
          labels:
            hostname: 'testnet-gear04'

  rules.yml: |
    groups:
      - name: alerts
        rules:
          - alert: HostDown
            expr: up == 0
            for: 30s
            labels:
              severity: critical
            annotations:
              summary: 'Instance [{{ $labels.hostname }} - {{ $labels.instance }}]
              has been down more the 30 seconds!'

          - alert: HostHighCpuLoad
            expr: 100 - (avg by(instance) (rate(node_cpu_seconds_total{mode='idle'}[5m])) * 100) > 80
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: 'On instance [{{ $labels.hostname }} - {{ $labels.instance }}]
              CPU load > 80% in the past 5 minutes!'

          - alert: HostOutOfMemory
            expr: node_memory_MemAvailable_bytes / node_memory_MemTotal_bytes * 100 < 20
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: 'On instance [{{ $labels.hostname }} - {{ $labels.instance }}]
              RAM used > 80% in the past 5 minutes!'

          - alert: HostOutOfDiskSpace
            expr: (node_filesystem_avail_bytes * 100) / node_filesystem_size_bytes < 20 and ON (instance, device, mountpoint) node_filesystem_readonly == 0
            for: 5m
            labels:
              severity: warning
            annotations:
              summary: 'On instance [{{ $labels.hostname }} - {{ $labels.instance }}]
              Disk used > 80% in the past 5 minutes!'

          - alert: NoBlocksProduction
            expr: rate(substrate_block_height{status="finalized"}[10m])*60 < 5
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: 'Instance [{{ $labels.instance }}]
              not production new block in the past 10 minutes!'

          - alert: NoIncomingConnection
            expr: increase(substrate_sub_libp2p_incoming_connections_total[5m]) == 0
            for: 5m
            labels:
              severity: critical
            annotations:
              summary: 'Instance [{{ $labels.instance }}]
              has not new incoming connection in the past 5 minutes!'

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      securityContext:
        runAsUser: 0
      containers:
      - name: prometheus
        image: prom/prometheus:latest
        ports:
          - containerPort: 9090
        volumeMounts:
        - name: prometheus-conf
          mountPath: /etc/prometheus
        - name: prometheus-data
          mountPath: /prometheus
        command:
          - /bin/prometheus
        args:
          - '--storage.tsdb.retention=24h'
          - '--storage.tsdb.path=/prometheus'
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--web.route-prefix=/'
          - '--web.external-url=https://monitoring.gear-tech.io/prometheus'
      volumes:
        - name: prometheus-conf
          configMap:
            name: prometheus-conf
        - name: prometheus-data
          awsElasticBlockStore:
            volumeID: 'vol-035b71ba840f01e1c'
            fsType: ext4

---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
spec:
  selector:
    app: prometheus
  type: NodePort
  ports:
  - name: prometheus
    protocol: TCP
    port: 9090
 