{
  "jrgen": "1.1",
  "jsonrpc": "2.0",
  "info": {
    "title": "GEAR JSONRPC API",
    "description": [
      "Description jsonrpc api of gear backend",
      "This api follows the json-rpc 2.0 specification. More information available at http://www.jsonrpc.org/specification."
    ],
    "version": "1.0"
  },
  "definitions": {
    "auth": {
      "type": "object",
      "properties": {
        "access_token": {
          "description": "Bearer token of the created session.",
          "examples": ["123456890"],
          "type": "string"
        }
      },
      "required": ["access_token"]
    },
    "user": {
      "description": "User data",
      "type": "object",
      "properties": {
        "email": {
          "description": "",
          "examples": ["user@gear.io"],
          "type": "string"
        },
        "name": {
          "description": "Fullname",
          "examples": ["Ivan Ivanov"],
          "type": "string"
        },
        "username": {
          "description": "Username",
          "examples": ["ivan_navi"],
          "type": "string"
        },
        "photoUrl": {
          "description": "Photo url",
          "examples": ["http://photo.url"],
          "type": "string"
        },
        "publicKey": {
          "description": "Public key",
          "examples": ["5GHJ54GHgh4"],
          "type": "string"
        },
        "publicKeyRaw": {
          "description": "Public key in hex format",
          "examples": ["0x452374655273fafc26453b2bc27328d287de3eff"],
          "type": "string"
        }
      }
    },
    "metadata": {
      "description": "Metadata of uploaded program",
      "type": "object",
      "properties": {
        "program": {
          "type": "string",
          "description": "program ID"
        },
        "meta": {
          "type": "string",
          "description": "Metadata"
        }
      },
      "required": ["program", "meta"]
    },
    "program": {
      "type": "object",
      "properties": {
        "hash": {
          "description": "program hash",
          "examples": ["0x90b4a76995cdfb347425f3800e60fe4e44b110ad4944dcdc1c95d9689f65b666"],
          "type": "string"
        },
        "programNumber": {
          "description": "Number of program in order",
          "examples": ["0xceb60548a4f7778aa05daffa89b301363bb375442526d4ec9e7715a4f573f91a"],
          "type": "string"
        },
        "name": {
          "description": "Program name",
          "examples": ["demo.wasm"],
          "type": "string"
        },
        "callCount": {
          "description": "Number of program call",
          "examples": [3],
          "type": "integer"
        },
        "uploadedAt": {
          "description": "Date when program was uploaded",
          "examples": ["Fri Jun 18 2021 16:17:01 GMT+0300 (Moscow Standard Time)"],
          "type": "string"
        },
        "title": {
          "type": "string",
          "description": "Title of program from metadata"
        },
        "meta": {
          "type": "obect",
          "description": "Metadata of program",
          "properties": {
            "$ref": "#definitions/metadata"
          }
        },
        "initStatus": {
          "type": "string",
          "description": "Program initializtaion status",
          "examples": ["in progress", "success", "failed"]
        }
      },
      "required": ["hash", "blockHash", "programNumber", "name", "callCount", "uploadedAt", "initStatus"]
    },
    "message": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Message id",
          "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
        },
        "destination": {
          "type": "string",
          "description": "Destination (user publicKey)",
          "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
        },
        "program": {
          "type": "string",
          "description": "Program id",
          "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
        },
        "payload": {
          "type": "string",
          "description": "Message payload",
          "examples": ["PING"]
        },
        "responseId": {
          "type": "string",
          "description": "Response id",
          "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
        },
        "response": {
          "type": "string",
          "description": "Response payload",
          "examples": ["PONG"]
        },
        "date": {
          "type": "string",
          "description": "Date and time of message",
          "examples": ["2021-08-09T12:07:54.064Z"]
        },
        "isRead": {
          "type": "boolean",
          "description": "Has the message been read",
          "examples": [false]
        },
        "required": ["id", "type", "date", "program", "dest"]
      }
    },
    "errors": {
      "invalidMethodParams": {
        "description": "The provided method parameters are invalid",
        "code": -32602,
        "message": "Invalid method parameters"
      },
      "methodNotFound": {
        "description": "The provided method not found",
        "code": -32601,
        "message": "Method not found"
      },
      "internalServer": {
        "description": "Internal server error",
        "code": -32000,
        "message": "Internal server error"
      },
      "unathorized": {
        "description": "The provided credentials are invalid",
        "code": -32003,
        "message": "Unathorized"
      },
      "gearNode": {
        "description": "The error occurs in the gear node",
        "code": -32010,
        "message": "Gear node error"
      },
      "transactionError": {
        "description": "The error occurs when the transaction failed",
        "code": -32011,
        "message": "Invalid transaction"
      },
      "programNotFound": {
        "description": "The requested program not found",
        "code": -32013,
        "message": "Program not found"
      },
      "metadataNotFound": {
        "description": "The error occurs when the metadata for the provided program is not found",
        "code": -32015,
        "message": "Metadata not found"
      },
      "messageNotFound": {
        "description": "The requested message not found",
        "code": -32014,
        "message": "Message not found"
      },
      "signNotVerified": {
        "description": "The error occurs when sent signature was not verified",
        "code": -32017,
        "message": "Signature not verified"
      }
    }
  },

  "methods": {
    "login.github": {
      "summary": "Login by github",
      "tags": ["Login", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "code": {
            "description": "Code recieved after authorization on github",
            "examples": ["42da98492849823u9"],
            "type": "string"
          }
        },
        "required": ["code"]
      },
      "result": {
        "$ref": "#/definitions/auth"
      },
      "errors": [{ "$ref": "#/definitions/errors/invalidMethodParams" }]
    },

    "login.telegram": {
      "summary": "Login by telegram",
      "tags": ["Login", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Id recieved after authorization on telegram",
            "examples": ["132321"],
            "type": "string"
          },
          "first_name": {
            "description": "First name recieved after authorization on telegram",
            "examples": ["Ivan"],
            "type": "string"
          },
          "last_name": {
            "description": "Last name recieved after authorization on telegram",
            "examples": ["Ivanov"],
            "type": "string"
          },
          "username": {
            "description": "Username recieved after authorization on telegram",
            "examples": ["ivan_navi"],
            "type": "string"
          },
          "photo_url": {
            "description": "Photo url recieved after authorization on telegram",
            "examples": ["http://photo.url"],
            "type": "string"
          },
          "auth_date": {
            "description": "Auth date recieved after authorization on telegram",
            "examples": ["12.12.12"],
            "type": "string"
          },
          "hash": {
            "description": "Hash recieved after authorization on telegram",
            "examples": ["hsdiufhisduhfidshfshfi47h39gfh8rewhf857"],
            "type": "string"
          }
        },
        "required": ["id", "first_name", "last_name", "username", "photo_url", "auth_date", "hash"]
      },
      "result": {
        "$ref": "#/definitions/auth"
      },
      "errors": [{ "$ref": "#/definitions/errors/invalidMethodParams" }]
    },

    "user.profile": {
      "summary": "Getting user profile",
      "tags": ["User", "Http"],
      "result": {
        "$ref": "#/definitions/user"
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "user.addPublicKey": {
      "summary": "Add user public key",
      "tags": ["User", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public Key",
            "examples": ["5FHR5Ac45FSwAjpWMtsnPFsnxaWoEPs343kbqcAAnu8fNeQk"]
          },
          "publicKeyRaw": {
            "type": "string",
            "description": "Raw Public Key",
            "examples": ["0x8e66638d3bdcd46d3bdbb115ce1b71a972fd05e3ac431fa482480952e135a55d"]
          }
        },
        "required": ["hash"]
      },
      "result": {
        "type": "object",
        "description": "Public Key",
        "properties": {
          "publicKey": {
            "type": "string",
            "description": "Public Key",
            "examples": ["5FHR5Ac45FSwAjpWMtsnPFsnxaWoEPs343kbqcAAnu8fNeQk"]
          }
        }
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "program.data": {
      "summary": "Getting uploaded program data",
      "tags": ["Program", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string",
            "description": "Hash of program",
            "examples": ["0x746583756837658348"]
          }
        },
        "required": ["hash"]
      },
      "result": {
        "$ref": "#/definitions/program"
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }, { "$ref": "#/definitions/errors/invalidMethodParams" }]
    },

    "program.addMeta": {
      "summary": "Saving sent payload",
      "tags": ["Messages", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "string",
            "description": "Program ID",
            "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
          },
          "meta": {
            "type": "string",
            "description": "Metadata in string format"
          },
          "signature": {
            "type": "string",
            "description": "Metadata signed with a keyring in hex format"
          },
          "name": {
            "type": "string",
            "description": "Name of the program. (Optional)"
          },
          "title": {
            "type": "string",
            "description": "Title of the program. (Optional)"
          }
        },
        "required": ["programId", "meta", "signature"]
      },
      "errors": [
        { "$ref": "#/definitions/errors/unathorized" },
        { "$ref": "#definitions/errors/programNotFound" },
        { "$ref": "#definitions/errors/signNotVerified" }
      ]
    },

    "program.getMeta": {
      "summary": "Getting metadata of the program",
      "tags": ["Program", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "programId": {
            "type": "string",
            "description": "Program ID",
            "examples": ["0xfc93a49b14b4e7e2e3990d7ca0853111c8abb04895663bf84d68b9cf12604c18"]
          }
        },
        "required": ["programId"]
      },
      "result": {
        "$ref": "#definitions/metadata"
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }, { "$ref": "#/definitions/errors/invalidMethodParams" }]
    },

    "program.all": {
      "summary": "Getting all uploaded program",
      "tags": ["Program", "Http"],
      "result": {
        "type": "array",
        "items": [{ "$ref": "#/definitions/program" }]
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "program.allUser": {
      "summary": "Getting all user's uploaded program",
      "tags": ["Program", "Http"],
      "result": {
        "type": "array",
        "items": [{ "$ref": "#/definitions/program" }]
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "message.all": {
      "summary": "Getting all user's messages",
      "tags": ["Messages", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "destination": {
            "type": "string",
            "description": "The user's public key in hex format"
          },
          "isRead": {
            "type": "boolean",
            "description": "Read or unread messages. Default - all"
          },
          "programId": {
            "type": "string",
            "description": "Program hash. Returns messages received from a specific program"
          },
          "limit": {
            "type": "number",
            "description": "Count of messages to return"
          },
          "offset": {
            "type": "number",
            "description": "The offset required to select a specific subset of messages"
          }
        },
        "required": ["destination"]
      },
      "result": {
        "type": "array",
        "items": [{ "$ref": "#/definitions/message" }]
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "message.countUnread": {
      "summary": "Getting count of unread messages",
      "tags": ["Messages", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "publicKeyRaw": {
            "type": "string",
            "description": "The user's public key in hex format"
          }
        },
        "required": ["destination"]
      },
      "result": {
        "type": "number",
        "description": "Count unread events",
        "examples": 10
      },
      "errors": [{ "$ref": "#/definitions/errors/unathorized" }]
    },

    "message.savePayload": {
      "summary": "Saving sent payload",
      "tags": ["Messages", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "messageId": {
            "type": "string",
            "description": "Message ID"
          },
          "payload": {
            "type": "string",
            "description": "The payload that was sent"
          },
          "signature": {
            "type": "string",
            "description": "Payload signed with a keyring in hex format"
          }
        },
        "required": ["messageId", "payload", "signature"]
      },
      "errors": [
        { "$ref": "#/definitions/errors/unathorized" },
        { "$ref": "#definitions/errors/messageNotFound" },
        { "$ref": "#definitions/errors/signNotVerified" }
      ]
    },

    "message.markAsRead": {
      "summary": "Mark message as read",
      "tags": ["Messages", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "publicKeyRaw": {
            "type": "string",
            "description": "The user's public key in hex format"
          },
          "id": {
            "type": "string",
            "description": "Message id"
          }
        },
        "required": ["publicKeyRaw", "id"]
      },
      "errors": [
        { "$ref": "#/definitions/errors/unathorized" },
        { "$ref": "#definitions/errors/messageNotFound" },
        { "$ref": "#/definitions/errors/invalidMethodParams" }
      ]
    },

    "balance.topUp": {
      "summary": "Top up user balance",
      "tags": ["Balance", "Http"],
      "params": {
        "type": "object",
        "properties": {
          "to": {
            "type": "string",
            "description": "User public key"
          },
          "value": {
            "type": "integer",
            "description": "The number of units that need to be transfer",
            "examples": [1234567]
          }
        },
        "required": ["value"]
      },
      "result": {
        "type": "object",
        "description": "Information about success transaction",
        "properties": {
          "message": {
            "examples": ["Transfer balance success"],
            "type": "string",
            "minLength": 1
          }
        }
      },
      "errors": [
        { "$ref": "#/definitions/errors/unathorized" },
        { "$ref": "#/definitions/errors/invalidMethodParams" },
        { "$ref": "#/definitions/errors/transactionError" }
      ]
    }
  }
}
