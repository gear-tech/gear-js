#
# Composition to be run within the integration pipeline.
# It brings up the crucial services and runs contract-driven tests between them.
#
# Best used like so:
# $ docker compose up --build --exit-code-from=contract_test
#
version: '3'

services:
  # Downstream dependencies the system needs to run:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - '2181:2181'
    environment:
      ZOO_MAX_SESSION_TIMEOUT: 50000

  kafka:
    image: wurstmeister/kafka
    ports:
      - '9094:9094'
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: SASL_PLAINTEXT://:9094
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://kafka:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf'
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    volumes:
      - ../seed/kafka_testovka.conf:/etc/kafka/kafka_server_jaas.conf

  postgres:
    image: postgres
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: postgres
    volumes:
      - volatile:/var/lib/postgresql/data
      - ../seed/seed.sql:/docker-entrypoint-initdb.d/seed.sql:ro
    ports:
      - '5432:5432'

  # The system under test:
  data_storage:
    image: ../../data-storage
    profiles: ['contract']
    volumes:
      - ../../data-storage:/usr/src/data-storage:ro
    depends_on:
      - postgres
    environment: &mock-environment
      DB_NAME: postgres
      DB_USER: postgres
      DB_PASSWORD: postgres
      DB_HOST: postgres
      KAFKA_CLIENT_ID: data-storage
      KAFKA_GROUP_ID: data-storage
      KAFKA_BROKERS: kafka:9094
      KAFKA_SASL_USERNAME: kafka_user
      KAFKA_SASL_PASSWORD: passwd

  # api_gateway:
  #   ports:
  #     - '3000:3000'
  #   image: mithriy/gear-api-gateway:nightly
  #   environment:
  #     <<: *mock-environment
  #     KAFKA_GROUP_ID: api-gateway
  #     KAFKA_CLIENT_ID: api-gateway
  #     PORT: 3000

  # events_testnet:
  #   image: mithriy/gear-event-listener:nightly
  #   environment:
  #     <<: *mock-environment
  #     KAFKA_CLIENT_ID: events-testnet
  #     KAFKA_GROUP_ID: events-testnet
  #     WS_PROVIDER: ${WS_PROVIDER_TESTNET}

  # events_wrsh:
  #   image: mithriy/gear-event-listener:nightly
  #   environment:
  #     <<: *mock-environment
  #     KAFKA_CLIENT_ID: events-wrsh
  #     KAFKA_GROUP_ID: events-wrsh
  #     WS_PROVIDER: ${WS_PROVIDER_WRSH}

  # The test suite:
  contract_test:
    build:
      context: ./
    depends_on:
      - postgres
      - data_storage
    volumes:
      - ./src:/usr/app:ro

volumes:
  volatile:
    driver_opts:
      type: tmpfs
      device: tmpfs
