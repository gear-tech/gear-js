#
# Compose to be run within integration pipeline.
# It brings up crucial services and run the automated UI tests against them.
#
# Best used like following:
# $ docker compose up --build --exit-code-from=browser_test
#
version: '3'

services:
  # Downstream dependencies the system needs to run:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - '2181:2181'
    environment:
      - ZOO_MAX_SESSION_TIMEOUT=50000

  kafka:
    image: wurstmeister/kafka
    ports:
      - 9094:9094
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 0
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: SASL_PLAINTEXT://:9094
      KAFKA_ADVERTISED_LISTENERS: SASL_PLAINTEXT://${KAFKA_HOST_NAME}:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: SASL_PLAINTEXT
      KAFKA_OPTS: '-Djava.security.auth.login.config=/etc/kafka/kafka_server_jaas.conf'
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
    volumes:
      - ./ansible/tasks/kafka/jaas.conf:/etc/kafka/kafka_server_jaas.conf

  pg_data_storage:
    image: postgres
    environment:
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - /home/ec2/data-storage/pg_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'

  # The system under test:
  api:
    image: ./data-storage
    volumes:
      - ./website/api-gateway:/usr/src/api-gateway:ro

  # The test suite:
  api_test:
    build: ./api-test
