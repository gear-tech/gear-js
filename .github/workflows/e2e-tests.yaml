name: 'e2e test'

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: master
    paths:
      - website/**
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: test-env
  DOCKER_BUILDKIT: 1

jobs:
  run-unit-tests:
    name: Unit Tests for `data-storage`
    runs-on: ubuntu-latest
    steps:
      - name: Cancel previous workflow runs
        uses: styfle/cancel-workflow-action@0.4.0
        with:
          access_token: ${{ github.token }}

      - name: Load current commit
        uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}

      - uses: c-hive/gha-yarn-cache@v2

      - name: Setup NodeJS
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: yarn

      - name: Install dependencies
        uses: borales/actions-yarn@v2.3.0
        with:
          cmd: install

      - name: Build interfaces and jsonrpc-errors
        run: yarn build:interfaces && yarn build:jsonrpc-errors

      - name: Run tests
        working-directory: 'website/data-storage'
        run: yarn test

  wait-previous-run:
    needs: [run-unit-tests]
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    steps:
      - name: Wait previous run
        uses: mktcode/consecutive-workflow-action@v1 # please read security note
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-gear-node-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Data Storage Docker image
        uses: docker/build-push-action@master
        with:
          file: k8s/gear-node/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-node:dev

  build-and-push-data-storage-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Data Storage Docker image
        uses: docker/build-push-action@master
        with:
          file: website/data-storage/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-data-storage:dev

  build-and-push-api-gateway-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Api Gateway Docker image
        uses: docker/build-push-action@master
        with:
          file: website/api-gateway/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:dev

  build-and-push-event-listeners-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Events Listener Docker image
        uses: docker/build-push-action@master
        with:
          file: website/events-listener/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-events-listener:dev

  build-and-push-test-balance-image:
    if: github.event.pull_request.draft == false
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: dev
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Test Balance Docker image
        uses: docker/build-push-action@master
        with:
          file: website/test-balance/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test-balance:dev

  purge-k8s-test-env:
    if: github.event.pull_request.draft == false
    needs:
      [
        build-and-push-data-storage-image,
        build-and-push-api-gateway-image,
        build-and-push-event-listeners-image,
        build-and-push-test-balance-image,
        wait-previous-run,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment gear-node api-gateway-testenv frontend-nginx-testenv events-listener-rpc-testenv postgres-testenv -n $KUBE_NAMESPACE

      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n $KUBE_NAMESPACE | xargs -n1 -t kubectl rollout status -n $KUBE_NAMESPACE --timeout=120s

      - name: Deploy to k8s data-storage
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment data-storage-testenv -n $KUBE_NAMESPACE

      - name: Check k8s deployment data-storage
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout status deployment data-storage-testenv -n $KUBE_NAMESPACE --timeout=120s

  run-e2e-tests:
    if: github.event.pull_request.draft == false
    needs: [purge-k8s-test-env, wait-previous-run]
    runs-on: ubuntu-latest
    environment: dev

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install NodeJS 16.x
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 16.x

      - name: Prepare&Run Tests
        working-directory: website/tests
        env:
          API_ADDRESS: ${{ secrets.API_ADDRESS_URL_TEST }}
          WS_PROVIDER: ${{ secrets.WS_PROVIDER_URL_TEST }}
        run: |
          ./download-examples.sh
          YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install
          yarn start
