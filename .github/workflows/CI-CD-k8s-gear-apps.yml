name: Deploy Gear-apps to k8s stage/prod

on:
  push:
    branches: ['main']
    paths:
      - apps/**
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: prod-gear-apps

jobs:
  wait-previous-run:
    runs-on: ubuntu-latest
    steps:
      - uses: mktcode/consecutive-workflow-action@v1 # please read security note
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  conditional_job_check_files:
    runs-on: ubuntu-latest
    # Declare outputs for next jobs
    outputs:
      auction_changed: ${{ steps.check_file_changed.outputs.auction_changed }}
      staking_changed: ${{ steps.check_file_changed.outputs.staking_changed }}
      upload_changed: ${{ steps.check_file_changed.outputs.upload_changed }}
      supply_changed: ${{ steps.check_file_changed.outputs.supply_changed }}

    steps:
      - uses: actions/checkout@v2
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0
      - shell: pwsh
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under auction/ has changed (added, modified, deleted)
          $SourceDiffAuction = $diff | Where-Object { $_ -match '^apps/auction/' }
          $HasDiffAuction = $SourceDiffAuction.Length -gt 0

          # Check if a file under staking/ has changed (added, modified, deleted)
          $SourceDiffStaking = $diff | Where-Object { $_ -match '^apps/staking/' }
          $HasDiffStaking = $SourceDiffStaking.Length -gt 0

          # Check if a file under upload-dapp-chain/ has changed (added, modified, deleted)
          $SourceDiffUpload = $diff | Where-Object { $_ -match '^apps/upload-dapp-chain/' }
          $HasDiffUpload = $SourceDiffUpload.Length -gt 0






          Write-Host "::set-output name=auction_changed::$HasDiffAuction"
          Write-Host "::set-output name=staking_changed::$HasDiffStaking"
          Write-Host "::set-output name=upload_changed::$HasDiffUpload"
          Write-Host "::set-output name=supply_changed::$HasDiffSupply"

  build-and-push-auction-image:
    runs-on: ubuntu-latest
    needs: [wait-previous-run, conditional_job_check_files]
    if: needs.conditional_job_check_files.outputs.auction_changed == 'True'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Auction Docker image
        uses: docker/build-push-action@master
        with:
          file: apps/auction/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-auction:prod
          build-args: |
            REACT_APP_NODE_ADDRESS=${{ secrets.REACT_APP_NODE_ADDRESS }}
            REACT_APP_IPFS_GATEWAY_ADDRESS=${{ secrets.REACT_APP_IPFS_GATEWAY_ADDRESS }}
            REACT_APP_AUCTION_CONTRACT_ADDRESS=${{ secrets.REACT_APP_AUCTION_CONTRACT_ADDRESS }}
            REACT_APP_DAPPS_API_ADDRESS=${{ secrets.REACT_APP_DAPPS_API_ADDRESS}}

  build-and-push-staking-image:
    runs-on: ubuntu-latest
    needs: [wait-previous-run, conditional_job_check_files]
    if: needs.conditional_job_check_files.outputs.staking_changed == 'True'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Staking Docker image
        uses: docker/build-push-action@master
        with:
          file: apps/staking/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-staking:prod
          build-args: |
            REACT_APP_NODE_ADDRESS=${{ secrets.REACT_APP_NODE_ADDRESS }}
            REACT_APP_FTOKEN_CONTRACT_ADDRESS=${{ secrets.REACT_APP_FTOKEN_CONTRACT_ADDRESS }}
            REACT_APP_STAKING_CONTRACT_ADDRESS=${{ secrets.REACT_APP_STAKING_CONTRACT_ADDRESS }}
            REACT_APP_DAPPS_API_ADDRESS=${{ secrets.REACT_APP_DAPPS_API_ADDRESS}}

  build-and-push-upload-image:
    runs-on: ubuntu-latest
    needs: [wait-previous-run, conditional_job_check_files]
    if: needs.conditional_job_check_files.outputs.upload_changed == 'True'
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          # Checkout as many commits as needed for the diff
          fetch-depth: 0

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Upload Dapp Docker image
        uses: docker/build-push-action@master
        with:
          file: apps/upload-dapp-chain/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-upload:prod

  deploy-auction-k8s:
    needs: [build-and-push-auction-image, wait-previous-run]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment auction -n $KUBE_NAMESPACE

      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n $KUBE_NAMESPACE | xargs -n1 -t kubectl rollout status -n $KUBE_NAMESPACE --timeout=120s

  deploy-staking-k8s:
    needs: [build-and-push-staking-image, wait-previous-run]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment staking -n $KUBE_NAMESPACE

      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n $KUBE_NAMESPACE | xargs -n1 -t kubectl rollout status -n $KUBE_NAMESPACE --timeout=120s

  deploy-upload-k8s:
    needs: [build-and-push-upload-image, wait-previous-run]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment upload-dappchain -n $KUBE_NAMESPACE

      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n $KUBE_NAMESPACE | xargs -n1 -t kubectl rollout status -n $KUBE_NAMESPACE --timeout=120s
