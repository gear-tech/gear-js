name: Development RabbitMQ

on:
  push:
    branches: ['ap-backend-rabbitmq']
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}

jobs:
  wait-previous-run:
    runs-on: ubuntu-latest
    steps:
      - uses: mktcode/consecutive-workflow-action@v1 # please read security note
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

  build-frontend-image-staging:
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Frontend Docker image
        uses: docker/build-push-action@master
        with:
          context: idea/frontend
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:rabbit
          build-args: |
            REACT_APP_NODE_ADDRESS=${{ secrets.REACT_APP_NODE_ADDRESS_RABBIT }}
            REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL_RABBIT }}
            REACT_APP_WASM_COMPILER_URL=${{ secrets.REACT_APP_WASM_COMPILER_URL }}
            REACT_APP_DEFAULT_NODES_URL=${{ secrets.REACT_APP_DEFAULT_NODES_URL_RABBIT }}
            REACT_APP_DEFAULT_TRANSFER_BALANCE_VALUE=${{ secrets.REACT_APP_DEFAULT_TRANSFER_BALANCE_VALUE }}
            REACT_APP_HCAPTCHA_SITE_KEY=${{ secrets.REACT_APP_HCAPTCHA_SITE_KEY }}
            
  build-data-storage-image-staging:
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Data Storage Docker image
        uses: docker/build-push-action@master
        with:
          file: idea/data-storage/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-data-storage:rabbit

  build-api-gateway-image-staging:
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Api Gateway Docker image
        uses: docker/build-push-action@master
        with:
          file: idea/api-gateway/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api-gateway:rabbit

  build-test-balance-image-staging:
    runs-on: ubuntu-latest
    needs: [wait-previous-run]
    environment: staging
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to the github container registry
        uses: docker/login-action@master
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Test Balance Docker image
        uses: docker/build-push-action@master
        with:
          file: idea/test-balance/Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-test-balance:rabbit

  deploy-to-k8s-staging:
    needs:
      [
        build-frontend-image-staging,
        build-data-storage-image-staging,
        build-api-gateway-image-staging,
        build-test-balance-image-staging,
        wait-previous-run,
      ]
    runs-on: ubuntu-latest

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment postgres rabbitmq -n rabbitmq
          
      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n rabbitmq | xargs -n1 -t kubectl rollout status -n rabbitmq --timeout=120s
          
      - name: Deploy to k8s
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: rollout restart deployment api-gateway frontend-nginx data-storage-rpc gear-node test-balance-testenv -n rabbitmq

      - name: Check k8s deployments
        uses: sergeyfilyanin/kubectl-aws-eks@master
        with:
          args: get deployment -o name -n rabbitmq | xargs -n1 -t kubectl rollout status -n rabbitmq --timeout=120s
          
  run-e2e-tests:
    runs-on: ubuntu-latest
    environment: dev
    needs: [deploy-to-k8s-staging]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install NodeJS 16.x
        uses: actions/setup-node@v2.1.5
        with:
          node-version: 16.x

      - name: Prepare&Run Tests
        timeout-minutes: 7
        working-directory: idea/tests
        env:
          API_ENDPOINT: ${{ secrets.API_ADDRESS_URL_RABBIT }}
          WS_PROVIDER: ${{ secrets.WS_PROVIDER_URL_RABBIT }}
          TEST_ENV: ${{ secrets.TEST_ENV }}
        run: |
          YARN_ENABLE_IMMUTABLE_INSTALLS=false yarn install
          yarn test
