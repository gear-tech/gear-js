name: e2e tests

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    branches: master
    paths: 
      - website/**
  workflow_dispatch:

env:
  DOCKER_REGISTRY: ghcr.io
  DOCKER_USER: ${{ github.actor }}
  DOCKER_PASSWORD: ${{ github.token }}
  DOCKER_REPOSITORY: ${{ github.repository_owner }}
  DOCKER_IMAGE_TAG: latest
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
  KUBE_NAMESPACE: test-env

jobs:
  unit-tests:
    name: Unit tests 'data-storage'
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Cancel previous
        uses: styfle/cancel-workflow-action@HEAD
        with:
          access_token: ${{ github.token }}

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Yarn install & configure
        run: |
          sudo yarn set version berry
          sudo yarn config set nodeLinker node-modules
          sudo yarn config set enableGlobalCache true
          sudo yarn config set globalFolder /mnt/cashes/yarn
          sudo yarn plugin import @yarnpkg/plugin-workspace-tools
          sudo yarn install

      - name: Build 'interfaces' & 'jsonrpc-errors'
        run: sudo yarn build:interfaces && yarn build:jsonrpc-errors
        working-directory: website/

      - name: Unit tests
        run: sudo yarn test
        working-directory: website/data-storage/

  wait-previous-run:
    name: Wait previous run
    needs: unit-tests
    runs-on: k8s-runner
    steps:
      - name: Wait previous run
        uses: mktcode/consecutive-workflow-action@HEAD
        with:
          token: ${{ github.token }}

  build-and-push-gear-node-image:
    name: Build & push 'gear-node'
    needs: wait-previous-run
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Docker login
        run: |
          echo ${{ env.DOCKER_PASSWORD }} \
          | docker login ${{ env.DOCKER_REGISTRY }} \
          -u ${{ env.DOCKER_USER }} \
          --password-stdin

      - name: Build image
        run: |
          docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/gear-node:dev \
          -f k8s/gear-node/Dockerfile .

      - name: Push image
        run: |
          docker push \
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/gear-node:dev

      - name: Docker logout
        run: |
          docker logout
  build-and-push-data-storage-image:
    name: Build & push 'data-storage'
    needs: wait-previous-run
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Docker login
        run: |
          echo ${{ env.DOCKER_PASSWORD }} \
          | docker login ${{ env.DOCKER_REGISTRY }} \
          -u ${{ env.DOCKER_USER }} \
          --password-stdin

      - name: Build image
        run: |
          docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/data-storage:dev \
          -f website/data-storage/Dockerfile .

      - name: Push image
        run: |
          docker push \
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/data-storage:dev

      - name: Docker logout
        run: |
          docker logout

  build-and-push-api-gateway-image:
    name: Build & push 'api-gateway'
    needs: wait-previous-run
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Docker login
        run: |
          echo ${{ env.DOCKER_PASSWORD }} \
          | docker login ${{ env.DOCKER_REGISTRY }} \
          -u ${{ env.DOCKER_USER }} \
          --password-stdin

      - name: Build image
        run: |
          docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/api-gateway:dev \
          -f website/api-gateway/Dockerfile .

      - name: Push image
        run: |
          docker push \
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/api-gateway:dev

      - name: Docker logout
        run: |
          docker logout

  build-and-push-events-listener-image:
    name: Build & push 'events-listener'
    needs: wait-previous-run
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Docker login
        run: |
          echo ${{ env.DOCKER_PASSWORD }} \
          | docker login ${{ env.DOCKER_REGISTRY }} \
          -u ${{ env.DOCKER_USER }} \
          --password-stdin

      - name: Build image
        run: |
          docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/events-listener:dev \
          -f website/events-listener/Dockerfile .

      - name: Push image
        run: |
          docker push \
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/events-listener:dev

      - name: Docker logout
        run: |
          docker logout

  build-and-push-test-balance-image:
    name: Build & push 'test-balance'
    needs: wait-previous-run
    runs-on: k8s-runner
    steps:
      - name: Fix permissions
        run: |
          sudo chown -R runner:runner /runner/_work

      - name: Checkout
        uses: actions/checkout@HEAD

      - name: Docker login
        run: |
          echo ${{ env.DOCKER_PASSWORD }} \
          | docker login ${{ env.DOCKER_REGISTRY }} \
          -u ${{ env.DOCKER_USER }} \
          --password-stdin

      - name: Build image
        run: |
          docker build \
          -t ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/test-balance:dev \
          -f website/test-balance/Dockerfile .

      - name: Push image
        run: |
          docker push \
          ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_REPOSITORY }}/test-balance:dev

      - name: Docker logout
        run: |
          docker logout

  deploy-to-k8s:
    name: Deploy to k8s
    needs:
      [
        build-and-push-data-storage-image,
        build-and-push-api-gateway-image,
        build-and-push-events-listener-image,
        build-and-push-test-balance-image,
        wait-previous-run
      ]
    runs-on: k8s-runner

    steps:
      - name: AWS login
        uses: aws-actions/configure-aws-credentials@HEAD
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy to k8s
        uses: kodermax/kubectl-aws-eks@HEAD
        with:
          args: rollout restart deployment gear-node api-gateway-testenv frontend-nginx-testenv events-listener-rpc-testenv postgres-testenv -n ${{ env.KUBE_NAMESPACE }}

      - name: Check k8s deployments
        uses: kodermax/kubectl-aws-eks@HEAD
        with:
          args: get deployment -o name -n ${{ env.KUBE_NAMESPACE }} | xargs -n1 -t kubectl rollout status -n ${{ env.KUBE_NAMESPACE }} --timeout=120s

      - name: Deploy to k8s data-storage
        uses: kodermax/kubectl-aws-eks@HEAD
        with:
          args: rollout restart deployment data-storage-testenv -n ${{ env.KUBE_NAMESPACE }}

      - name: Check k8s deployment data-storage
        uses: kodermax/kubectl-aws-eks@HEAD
        with:
          args: rollout status deployment data-storage-testenv -n ${{ env.KUBE_NAMESPACE }} --timeout=120s

  e2e-tests:
    name: e2e test
    needs: [deploy-to-k8s, wait-previous-run]
    runs-on: k8s-runner

    steps:
      - name: Checkout
        uses: actions/checkout@HEAD

      - name: e2e tests
        working-directory: website/tests
        run: |
          export API_ADDRESS=https://test-env.gear-tech.io/api
          export WS_PROVIDER=ws://ec2-54-193-93-95.us-west-1.compute.amazonaws.com:32422
          export YARN_ENABLE_IMMUTABLE_INSTALLS=false
          sudo yarn set version berry
          sudo yarn config set enableGlobalCache true
          sudo yarn config set globalFolder /mnt/cashes/yarn
          sudo yarn plugin import @yarnpkg/plugin-workspace-tools
          sudo yarn install
          yarn start
          
